(this.$WP=this.$WP||[]).push(["YckEaW",(e,t)=>{"use strict";var n,r,a,o,u,i,c=function(e,t,n,r,a,o,u,i){if(!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,a,o,u,i],p=0;(c=new Error(t.replace(/%s/g,(function(){return s[p++]})))).name="Invariant Violation"}throw c.framesToPop=1,c}};return[()=>{var t,s;n=c,function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=Object.prototype.hasOwnProperty,a=Array.prototype.splice,o=Object.prototype.toString;function u(e){return o.call(e).slice(8,-1)}var i=Object.assign||function(e,t){return c(t).forEach((function(n){r.call(t,n)&&(e[n]=t[n])})),e},c="function"==typeof Object.getOwnPropertySymbols?function(e){return Object.keys(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.keys(e)};function s(e){return Array.isArray(e)?i(e.constructor(e.length),e):"Map"===u(e)?new Map(e):"Set"===u(e)?new Set(e):e&&"object"==typeof e?i(Object.create(Object.getPrototypeOf(e)),e):e}var p=function(){function e(){this.commands=i({},f),this.update=this.update.bind(this),this.update.extend=this.extend=this.extend.bind(this),this.update.isEquals=function(e,t){return e===t},this.update.newContext=function(){return(new e).update}}return Object.defineProperty(e.prototype,"isEquals",{get:function(){return this.update.isEquals},set:function(e){this.update.isEquals=e},enumerable:!0,configurable:!0}),e.prototype.extend=function(e,t){this.commands[e]=t},e.prototype.update=function(e,t){var a=this,o="function"==typeof t?{$apply:t}:t;Array.isArray(e)&&Array.isArray(o)||n(!Array.isArray(o),"update(): You provided an invalid spec to update(). The spec may not contain an array except as the value of $set, $push, $unshift, $splice or any custom command allowing an array value."),n("object"==typeof o&&null!==o,"update(): You provided an invalid spec to update(). The spec and every included key path must be plain objects containing one of the following commands: %s.",Object.keys(this.commands).join(", "));var i=e;return c(o).forEach((function(t){if(r.call(a.commands,t)){var n=e===i;i=a.commands[t](o[t],i,o,e),n&&a.isEquals(i,e)&&(i=e)}else{var c="Map"===u(e)?a.update(e.get(t),o[t]):a.update(e[t],o[t]),p="Map"===u(i)?i.get(t):i[t];a.isEquals(c,p)&&(void 0!==c||r.call(e,t))||(i===e&&(i=s(e)),"Map"===u(i)?i.set(t,c):i[t]=c)}})),i},e}();t.Context=p;var f={$push:function(e,t,n){return l(t,n,"$push"),e.length?t.concat(e):t},$unshift:function(e,t,n){return l(t,n,"$unshift"),e.length?e.concat(t):t},$splice:function(e,t,r,o){return function(e,t){n(Array.isArray(e),"Expected $splice target to be an array; got %s",e),h(t.$splice)}(t,r),e.forEach((function(e){h(e),t===o&&e.length&&(t=s(o)),a.apply(t,e)})),t},$set:function(e,t,r){return function(e){n(1===Object.keys(e).length,"Cannot have more than one key in an object with $set")}(r),e},$toggle:function(e,t){y(e,"$toggle");var n=e.length?s(t):t;return e.forEach((function(e){n[e]=!t[e]})),n},$unset:function(e,t,n,r){return y(e,"$unset"),e.forEach((function(e){Object.hasOwnProperty.call(t,e)&&(t===r&&(t=s(r)),delete t[e])})),t},$add:function(e,t,n,r){return g(t,"$add"),y(e,"$add"),"Map"===u(t)?e.forEach((function(e){var n=e[0],a=e[1];t===r&&t.get(n)!==a&&(t=s(r)),t.set(n,a)})):e.forEach((function(e){t!==r||t.has(e)||(t=s(r)),t.add(e)})),t},$remove:function(e,t,n,r){return g(t,"$remove"),y(e,"$remove"),e.forEach((function(e){t===r&&t.has(e)&&(t=s(r)),t.delete(e)})),t},$merge:function(e,t,r,a){var o,u;return o=t,n((u=e)&&"object"==typeof u,"update(): $merge expects a spec of type 'object'; got %s",u),n(o&&"object"==typeof o,"update(): $merge expects a target of type 'object'; got %s",o),c(e).forEach((function(n){e[n]!==t[n]&&(t===a&&(t=s(a)),t[n]=e[n])})),t},$apply:function(e,t){var r;return n("function"==typeof(r=e),"update(): expected spec of $apply to be a function; got %s.",r),e(t)}},d=new p;function l(e,t,r){n(Array.isArray(e),"update(): expected target of %s to be an array; got %s.",r,e),y(t[r],r)}function y(e,t){n(Array.isArray(e),"update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?",t,e)}function h(e){n(Array.isArray(e),"update(): expected spec of $splice to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",e)}function g(e,t){var r=u(e);n("Map"===r||"Set"===r,"update(): %s expects a target of type Set or Map; got %s",t,r)}t.isEquals=d.update.isEquals,t.extend=d.extend,t.default=d.update,t.default.default=e.exports=i(t.default,t)}(s={exports:{}},s.exports),a=(t=r=s.exports)&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t,o=r.Context,u=r.isEquals,i=r.extend,e("default",a),e({Context:o,extend:i,isEquals:u})},[]]},[]]);
